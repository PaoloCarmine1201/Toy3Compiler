
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package main.java.org.example;

import java.util.ArrayList;
import Nodes.Decl.*;
import Nodes.Expr.*;
import Nodes.Stat.*;
import Nodes.*;
import java.util.Collections;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\110\000\002\002\010\000\002\002\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\002\000\002\004\004" +
    "\000\002\004\002\000\002\006\006\000\002\007\005\000" +
    "\002\007\007\000\002\007\003\000\002\007\005\000\002" +
    "\010\003\000\002\010\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\013\011\000\002\013\010\000\002\014\005\000\002\014" +
    "\003\000\002\015\005\000\002\016\005\000\002\016\003" +
    "\000\002\017\003\000\002\017\004\000\002\020\004\000" +
    "\002\020\002\000\002\021\006\000\002\005\004\000\002" +
    "\005\002\000\002\022\005\000\002\022\005\000\002\022" +
    "\005\000\002\022\006\000\002\022\004\000\002\022\012" +
    "\000\002\022\010\000\002\022\010\000\002\022\005\000" +
    "\002\023\005\000\002\023\003\000\002\024\005\000\002" +
    "\024\003\000\002\026\006\000\002\026\005\000\002\025" +
    "\005\000\002\025\005\000\002\025\005\000\002\025\005" +
    "\000\002\025\005\000\002\025\005\000\002\025\005\000" +
    "\002\025\005\000\002\025\005\000\002\025\005\000\002" +
    "\025\005\000\002\025\005\000\002\025\005\000\002\025" +
    "\004\000\002\025\004\000\002\025\003\000\002\025\003" +
    "\000\002\025\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\004\004\005\001\002\000\004\002\224\001" +
    "\002\000\010\005\ufffd\017\011\065\006\001\002\000\010" +
    "\010\ufff7\027\223\030\116\001\002\000\004\010\216\001" +
    "\002\000\010\005\ufffd\017\011\065\006\001\002\000\004" +
    "\065\161\001\002\000\004\005\015\001\002\000\010\005" +
    "\ufffd\017\011\065\006\001\002\000\004\005\ufffe\001\002" +
    "\000\036\006\ufffb\020\ufffb\032\ufffb\044\ufffb\050\ufffb\051" +
    "\ufffb\052\ufffb\053\ufffb\056\ufffb\061\ufffb\062\ufffb\063\ufffb" +
    "\064\ufffb\065\ufffb\001\002\000\036\006\uffdb\020\042\032" +
    "\036\044\025\050\030\051\037\052\026\053\031\056\023" +
    "\061\034\062\021\063\043\064\017\065\033\001\002\000" +
    "\050\007\uffe9\010\uffe9\016\uffe9\021\uffe9\025\uffe9\026\uffe9" +
    "\027\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\036\uffe9\037" +
    "\uffe9\040\uffe9\041\uffe9\042\uffe9\043\uffe9\045\uffe9\046\uffe9" +
    "\001\002\000\040\006\uffdb\020\042\023\uffdb\032\036\044" +
    "\025\050\030\051\037\052\026\053\031\056\023\061\034" +
    "\062\021\063\043\064\017\065\156\001\002\000\050\007" +
    "\uffeb\010\uffeb\016\uffeb\021\uffeb\025\uffeb\026\uffeb\027\uffeb" +
    "\031\uffeb\032\uffeb\033\uffeb\034\uffeb\036\uffeb\037\uffeb\040" +
    "\uffeb\041\uffeb\042\uffeb\043\uffeb\045\uffeb\046\uffeb\001\002" +
    "\000\050\007\uffba\010\uffba\016\uffba\021\uffba\025\uffba\026" +
    "\uffba\027\uffba\031\uffba\032\uffba\033\uffba\034\uffba\036\uffba" +
    "\037\uffba\040\uffba\041\uffba\042\uffba\043\uffba\045\uffba\046" +
    "\uffba\001\002\000\004\020\150\001\002\000\004\006\147" +
    "\001\002\000\026\020\042\032\036\044\025\050\030\051" +
    "\037\061\034\062\021\063\043\064\017\065\046\001\002" +
    "\000\026\020\042\032\036\044\025\050\030\051\037\061" +
    "\034\062\021\063\043\064\017\065\046\001\002\000\042" +
    "\007\143\016\uffbb\025\uffbb\026\uffbb\031\uffbb\032\uffbb\033" +
    "\uffbb\034\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb" +
    "\043\uffbb\045\uffbb\046\uffbb\001\002\000\050\007\uffee\010" +
    "\uffee\016\uffee\021\uffee\025\uffee\026\uffee\027\uffee\031\uffee" +
    "\032\uffee\033\uffee\034\uffee\036\uffee\037\uffee\040\uffee\041" +
    "\uffee\042\uffee\043\uffee\045\uffee\046\uffee\001\002\000\004" +
    "\020\130\001\002\000\044\007\uffce\016\126\021\uffce\025" +
    "\uffce\026\uffce\031\057\032\053\033\063\034\061\036\062" +
    "\037\055\040\066\041\060\042\056\043\065\045\054\046" +
    "\067\001\002\000\054\010\ufff7\016\uffbc\020\047\024\uffd0" +
    "\025\uffbc\026\uffbc\027\117\030\116\031\uffbc\032\uffbc\033" +
    "\uffbc\034\uffbc\035\uffd0\036\uffbc\037\uffbc\040\uffbc\041\uffbc" +
    "\042\uffbc\043\uffbc\045\uffbc\046\uffbc\001\002\000\050\007" +
    "\uffec\010\uffec\016\uffec\021\uffec\025\uffec\026\uffec\027\uffec" +
    "\031\uffec\032\uffec\033\uffec\034\uffec\036\uffec\037\uffec\040" +
    "\uffec\041\uffec\042\uffec\043\uffec\045\uffec\046\uffec\001\002" +
    "\000\040\006\ufffc\020\ufffc\023\ufffc\032\ufffc\044\ufffc\050" +
    "\ufffc\051\ufffc\052\ufffc\053\ufffc\056\ufffc\061\ufffc\062\ufffc" +
    "\063\ufffc\064\ufffc\065\ufffc\001\002\000\026\020\042\032" +
    "\036\044\025\050\030\051\037\061\034\062\021\063\043" +
    "\064\017\065\046\001\002\000\050\007\uffed\010\uffed\016" +
    "\uffed\021\uffed\025\uffed\026\uffed\027\uffed\031\uffed\032\uffed" +
    "\033\uffed\034\uffed\036\uffed\037\uffed\040\uffed\041\uffed\042" +
    "\uffed\043\uffed\045\uffed\046\uffed\001\002\000\006\025\111" +
    "\026\112\001\002\000\006\024\104\035\105\001\002\000" +
    "\026\020\042\032\036\044\025\050\030\051\037\061\034" +
    "\062\021\063\043\064\017\065\046\001\002\000\050\007" +
    "\uffea\010\uffea\016\uffea\021\uffea\025\uffea\026\uffea\027\uffea" +
    "\031\uffea\032\uffea\033\uffea\034\uffea\036\uffea\037\uffea\040" +
    "\uffea\041\uffea\042\uffea\043\uffea\045\uffea\046\uffea\001\002" +
    "\000\034\021\064\031\057\032\053\033\063\034\061\036" +
    "\062\037\055\040\066\041\060\042\056\043\065\045\054" +
    "\046\067\001\002\000\050\007\uffbb\010\uffbb\016\uffbb\021" +
    "\uffbb\025\uffbb\026\uffbb\027\uffbb\031\uffbb\032\uffbb\033\uffbb" +
    "\034\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb\043" +
    "\uffbb\045\uffbb\046\uffbb\001\002\000\052\007\uffbc\010\uffbc" +
    "\016\uffbc\020\047\021\uffbc\025\uffbc\026\uffbc\027\uffbc\031" +
    "\uffbc\032\uffbc\033\uffbc\034\uffbc\036\uffbc\037\uffbc\040\uffbc" +
    "\041\uffbc\042\uffbc\043\uffbc\045\uffbc\046\uffbc\001\002\000" +
    "\030\020\042\021\051\032\036\044\025\050\030\051\037" +
    "\061\034\062\021\063\043\064\017\065\046\001\002\000" +
    "\004\021\052\001\002\000\050\007\uffcc\010\uffcc\016\uffcc" +
    "\021\uffcc\025\uffcc\026\uffcc\027\uffcc\031\uffcc\032\uffcc\033" +
    "\uffcc\034\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc" +
    "\043\uffcc\045\uffcc\046\uffcc\001\002\000\050\007\uffcd\010" +
    "\uffcd\016\uffcd\021\uffcd\025\uffcd\026\uffcd\027\uffcd\031\uffcd" +
    "\032\uffcd\033\uffcd\034\uffcd\036\uffcd\037\uffcd\040\uffcd\041" +
    "\uffcd\042\uffcd\043\uffcd\045\uffcd\046\uffcd\001\002\000\026" +
    "\020\042\032\036\044\025\050\030\051\037\061\034\062" +
    "\021\063\043\064\017\065\046\001\002\000\026\020\042" +
    "\032\036\044\025\050\030\051\037\061\034\062\021\063" +
    "\043\064\017\065\046\001\002\000\026\020\042\032\036" +
    "\044\025\050\030\051\037\061\034\062\021\063\043\064" +
    "\017\065\046\001\002\000\026\020\042\032\036\044\025" +
    "\050\030\051\037\061\034\062\021\063\043\064\017\065" +
    "\046\001\002\000\026\020\042\032\036\044\025\050\030" +
    "\051\037\061\034\062\021\063\043\064\017\065\046\001" +
    "\002\000\026\020\042\032\036\044\025\050\030\051\037" +
    "\061\034\062\021\063\043\064\017\065\046\001\002\000" +
    "\026\020\042\032\036\044\025\050\030\051\037\061\034" +
    "\062\021\063\043\064\017\065\046\001\002\000\026\020" +
    "\042\032\036\044\025\050\030\051\037\061\034\062\021" +
    "\063\043\064\017\065\046\001\002\000\026\020\042\032" +
    "\036\044\025\050\030\051\037\061\034\062\021\063\043" +
    "\064\017\065\046\001\002\000\050\007\uffbf\010\uffbf\016" +
    "\uffbf\021\uffbf\025\uffbf\026\uffbf\027\uffbf\031\uffbf\032\uffbf" +
    "\033\uffbf\034\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042" +
    "\uffbf\043\uffbf\045\uffbf\046\uffbf\001\002\000\026\020\042" +
    "\032\036\044\025\050\030\051\037\061\034\062\021\063" +
    "\043\064\017\065\046\001\002\000\026\020\042\032\036" +
    "\044\025\050\030\051\037\061\034\062\021\063\043\064" +
    "\017\065\046\001\002\000\026\020\042\032\036\044\025" +
    "\050\030\051\037\061\034\062\021\063\043\064\017\065" +
    "\046\001\002\000\050\007\uffc6\010\uffc6\016\uffc6\021\uffc6" +
    "\025\uffc6\026\uffc6\027\uffc6\031\057\032\053\033\063\034" +
    "\061\036\062\037\055\040\066\041\060\042\056\043\065" +
    "\045\uffc6\046\uffc6\001\002\000\050\007\uffc3\010\uffc3\016" +
    "\uffc3\021\uffc3\025\uffc3\026\uffc3\027\uffc3\031\uffc3\032\uffc3" +
    "\033\uffc3\034\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3\042" +
    "\uffc3\043\uffc3\045\uffc3\046\uffc3\001\002\000\050\007\uffc0" +
    "\010\uffc0\016\uffc0\021\uffc0\025\uffc0\026\uffc0\027\uffc0\031" +
    "\uffc0\032\uffc0\033\uffc0\034\uffc0\036\uffc0\037\uffc0\040\uffc0" +
    "\041\uffc0\042\uffc0\043\uffc0\045\uffc0\046\uffc0\001\002\000" +
    "\050\007\uffc9\010\uffc9\016\uffc9\021\uffc9\025\uffc9\026\uffc9" +
    "\027\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\036\062\037" +
    "\055\040\066\041\060\042\056\043\065\045\uffc9\046\uffc9" +
    "\001\002\000\050\007\uffc5\010\uffc5\016\uffc5\021\uffc5\025" +
    "\uffc5\026\uffc5\027\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5" +
    "\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\045" +
    "\uffc5\046\uffc5\001\002\000\050\007\uffc8\010\uffc8\016\uffc8" +
    "\021\uffc8\025\uffc8\026\uffc8\027\uffc8\031\uffc8\032\uffc8\033" +
    "\uffc8\034\uffc8\036\062\037\055\040\066\041\060\042\056" +
    "\043\065\045\uffc8\046\uffc8\001\002\000\050\007\uffc2\010" +
    "\uffc2\016\uffc2\021\uffc2\025\uffc2\026\uffc2\027\uffc2\031\uffc2" +
    "\032\uffc2\033\uffc2\034\uffc2\036\uffc2\037\uffc2\040\uffc2\041" +
    "\uffc2\042\uffc2\043\uffc2\045\uffc2\046\uffc2\001\002\000\050" +
    "\007\uffcb\010\uffcb\016\uffcb\021\uffcb\025\uffcb\026\uffcb\027" +
    "\uffcb\031\uffcb\032\uffcb\033\063\034\061\036\062\037\055" +
    "\040\066\041\060\042\056\043\065\045\uffcb\046\uffcb\001" +
    "\002\000\050\007\uffc1\010\uffc1\016\uffc1\021\uffc1\025\uffc1" +
    "\026\uffc1\027\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1\036" +
    "\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1\045\uffc1" +
    "\046\uffc1\001\002\000\050\007\uffc4\010\uffc4\016\uffc4\021" +
    "\uffc4\025\uffc4\026\uffc4\027\uffc4\031\uffc4\032\uffc4\033\uffc4" +
    "\034\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043" +
    "\uffc4\045\uffc4\046\uffc4\001\002\000\050\007\uffc7\010\uffc7" +
    "\016\uffc7\021\uffc7\025\uffc7\026\uffc7\027\uffc7\031\057\032" +
    "\053\033\063\034\061\036\062\037\055\040\066\041\060" +
    "\042\056\043\065\045\uffc7\046\067\001\002\000\050\007" +
    "\uffca\010\uffca\016\uffca\021\uffca\025\uffca\026\uffca\027\uffca" +
    "\031\uffca\032\uffca\033\063\034\061\036\062\037\055\040" +
    "\066\041\060\042\056\043\065\045\uffca\046\uffca\001\002" +
    "\000\004\007\110\001\002\000\026\020\042\032\036\044" +
    "\025\050\030\051\037\061\034\062\021\063\043\064\017" +
    "\065\046\001\002\000\004\007\107\001\002\000\040\006" +
    "\uffd7\020\uffd7\023\uffd7\032\uffd7\044\uffd7\050\uffd7\051\uffd7" +
    "\052\uffd7\053\uffd7\056\uffd7\061\uffd7\062\uffd7\063\uffd7\064" +
    "\uffd7\065\uffd7\001\002\000\040\006\uffda\020\uffda\023\uffda" +
    "\032\uffda\044\uffda\050\uffda\051\uffda\052\uffda\053\uffda\056" +
    "\uffda\061\uffda\062\uffda\063\uffda\064\uffda\065\uffda\001\002" +
    "\000\004\007\114\001\002\000\004\007\113\001\002\000" +
    "\040\006\uffd8\020\uffd8\023\uffd8\032\uffd8\044\uffd8\050\uffd8" +
    "\051\uffd8\052\uffd8\053\uffd8\056\uffd8\061\uffd8\062\uffd8\063" +
    "\uffd8\064\uffd8\065\uffd8\001\002\000\040\006\uffd9\020\uffd9" +
    "\023\uffd9\032\uffd9\044\uffd9\050\uffd9\051\uffd9\052\uffd9\053" +
    "\uffd9\056\uffd9\061\uffd9\062\uffd9\063\uffd9\064\uffd9\065\uffd9" +
    "\001\002\000\050\007\uffbe\010\uffbe\016\uffbe\021\uffbe\025" +
    "\uffbe\026\uffbe\027\uffbe\031\uffbe\032\uffbe\033\063\034\061" +
    "\036\062\037\055\040\066\041\060\042\056\043\065\045" +
    "\uffbe\046\uffbe\001\002\000\026\020\042\032\036\044\025" +
    "\050\030\051\037\061\034\062\021\063\043\064\017\065" +
    "\046\001\002\000\004\065\120\001\002\000\014\010\ufff7" +
    "\024\uffd0\027\117\030\116\035\uffd0\001\002\000\004\010" +
    "\ufff9\001\002\000\006\024\uffd1\035\uffd1\001\002\000\036" +
    "\010\ufff6\027\124\031\057\032\053\033\063\034\061\036" +
    "\062\037\055\040\066\041\060\042\056\043\065\045\054" +
    "\046\067\001\002\000\004\065\006\001\002\000\004\010" +
    "\ufff8\001\002\000\026\020\042\032\036\044\025\050\030" +
    "\051\037\061\034\062\021\063\043\064\017\065\046\001" +
    "\002\000\012\007\uffcf\021\uffcf\025\uffcf\026\uffcf\001\002" +
    "\000\026\020\042\032\036\044\025\050\030\051\037\061" +
    "\034\062\021\063\043\064\017\065\046\001\002\000\034" +
    "\021\132\031\057\032\053\033\063\034\061\036\062\037" +
    "\055\040\066\041\060\042\056\043\065\045\054\046\067" +
    "\001\002\000\004\054\133\001\002\000\004\022\134\001" +
    "\002\000\036\020\ufffb\023\ufffb\032\ufffb\044\ufffb\050\ufffb" +
    "\051\ufffb\052\ufffb\053\ufffb\056\ufffb\061\ufffb\062\ufffb\063" +
    "\ufffb\064\ufffb\065\ufffb\001\002\000\042\006\uffd4\020\uffd4" +
    "\023\uffd4\032\uffd4\044\uffd4\050\uffd4\051\uffd4\052\uffd4\053" +
    "\uffd4\055\136\056\uffd4\061\uffd4\062\uffd4\063\uffd4\064\uffd4" +
    "\065\uffd4\001\002\000\004\022\134\001\002\000\040\006" +
    "\uffd5\020\uffd5\023\uffd5\032\uffd5\044\uffd5\050\uffd5\051\uffd5" +
    "\052\uffd5\053\uffd5\056\uffd5\061\uffd5\062\uffd5\063\uffd5\064" +
    "\uffd5\065\uffd5\001\002\000\036\020\042\023\uffdb\032\036" +
    "\044\025\050\030\051\037\052\026\053\031\056\023\061" +
    "\034\062\021\063\043\064\017\065\033\001\002\000\004" +
    "\023\142\001\002\000\046\005\uffdd\006\uffdd\017\uffdd\020" +
    "\uffdd\023\uffdd\032\uffdd\044\uffdd\050\uffdd\051\uffdd\052\uffdd" +
    "\053\uffdd\055\uffdd\056\uffdd\061\uffdd\062\uffdd\063\uffdd\064" +
    "\uffdd\065\uffdd\001\002\000\040\006\uffd6\020\uffd6\023\uffd6" +
    "\032\uffd6\044\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6\056" +
    "\uffd6\061\uffd6\062\uffd6\063\uffd6\064\uffd6\065\uffd6\001\002" +
    "\000\034\007\145\031\057\032\053\033\063\034\061\036" +
    "\062\037\055\040\066\041\060\042\056\043\065\045\054" +
    "\046\067\001\002\000\040\006\uffd2\020\uffd2\023\uffd2\032" +
    "\uffd2\044\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2\056\uffd2" +
    "\061\uffd2\062\uffd2\063\uffd2\064\uffd2\065\uffd2\001\002\000" +
    "\050\007\uffbd\010\uffbd\016\uffbd\021\uffbd\025\uffbd\026\uffbd" +
    "\027\uffbd\031\057\032\053\033\063\034\061\036\062\037" +
    "\055\040\066\041\060\042\056\043\065\045\054\046\067" +
    "\001\002\000\004\002\001\001\002\000\026\020\042\032" +
    "\036\044\025\050\030\051\037\061\034\062\021\063\043" +
    "\064\017\065\046\001\002\000\034\021\152\031\057\032" +
    "\053\033\063\034\061\036\062\037\055\040\066\041\060" +
    "\042\056\043\065\045\054\046\067\001\002\000\004\057" +
    "\153\001\002\000\004\022\134\001\002\000\040\006\uffd3" +
    "\020\uffd3\023\uffd3\032\uffd3\044\uffd3\050\uffd3\051\uffd3\052" +
    "\uffd3\053\uffd3\056\uffd3\061\uffd3\062\uffd3\063\uffd3\064\uffd3" +
    "\065\uffd3\001\002\000\006\006\uffdc\023\uffdc\001\002\000" +
    "\050\016\uffbc\020\047\024\uffd0\025\uffbc\026\uffbc\027\157" +
    "\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffd0\036\uffbc\037" +
    "\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\045\uffbc\046\uffbc" +
    "\001\002\000\004\065\160\001\002\000\010\024\uffd0\027" +
    "\157\035\uffd0\001\002\000\004\020\162\001\002\000\010" +
    "\021\170\047\166\065\163\001\002\000\006\010\uffe1\016" +
    "\uffe1\001\002\000\004\010\213\001\002\000\006\010\uffe2" +
    "\016\211\001\002\000\004\065\210\001\002\000\004\021" +
    "\205\001\002\000\006\010\174\022\uffde\001\002\000\006" +
    "\007\172\021\uffe5\001\002\000\006\047\166\065\163\001" +
    "\002\000\004\021\uffe6\001\002\000\014\011\204\012\202" +
    "\013\201\014\177\015\203\001\002\000\004\022\134\001" +
    "\002\000\010\005\uffe7\017\uffe7\065\uffe7\001\002\000\010" +
    "\007\ufff0\021\ufff0\022\ufff0\001\002\000\004\022\uffdf\001" +
    "\002\000\010\007\ufff1\021\ufff1\022\ufff1\001\002\000\010" +
    "\007\ufff2\021\ufff2\022\ufff2\001\002\000\010\007\uffef\021" +
    "\uffef\022\uffef\001\002\000\010\007\ufff3\021\ufff3\022\ufff3" +
    "\001\002\000\006\010\174\022\uffde\001\002\000\004\022" +
    "\134\001\002\000\010\005\uffe8\017\uffe8\065\uffe8\001\002" +
    "\000\006\010\uffe0\016\uffe0\001\002\000\006\047\166\065" +
    "\163\001\002\000\004\010\uffe3\001\002\000\014\011\204" +
    "\012\202\013\201\014\177\015\203\001\002\000\006\007" +
    "\uffe4\021\uffe4\001\002\000\004\005\uffff\001\002\000\030" +
    "\011\204\012\202\013\201\014\177\015\203\050\030\051" +
    "\037\061\034\062\021\063\043\064\017\001\002\000\004" +
    "\007\ufff5\001\002\000\004\007\222\001\002\000\004\007" +
    "\ufff4\001\002\000\044\005\ufffa\006\ufffa\017\ufffa\020\ufffa" +
    "\023\ufffa\032\ufffa\044\ufffa\050\ufffa\051\ufffa\052\ufffa\053" +
    "\ufffa\056\ufffa\061\ufffa\062\ufffa\063\ufffa\064\ufffa\065\ufffa" +
    "\001\002\000\004\065\006\001\002\000\004\002\000\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\004\002\003\001\001\000\002\001\001\000" +
    "\012\003\011\006\007\007\006\013\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\214\006\007\007" +
    "\006\013\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\003\013\006\007\007\006\013\012\001\001\000" +
    "\002\001\001\000\004\004\015\001\001\000\024\005\023" +
    "\006\034\007\006\012\021\022\017\023\040\024\037\025" +
    "\031\026\026\001\001\000\002\001\001\000\020\005\154" +
    "\012\021\022\017\023\040\024\037\025\031\026\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\012\021\025\145\026\044\001" +
    "\001\000\010\012\021\025\143\026\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\012\021\025\114\026\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\021" +
    "\025\043\026\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\012\021" +
    "\024\047\025\031\026\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\021\025\102" +
    "\026\044\001\001\000\010\012\021\025\101\026\044\001" +
    "\001\000\010\012\021\025\100\026\044\001\001\000\010" +
    "\012\021\025\077\026\044\001\001\000\010\012\021\025" +
    "\076\026\044\001\001\000\010\012\021\025\075\026\044" +
    "\001\001\000\010\012\021\025\074\026\044\001\001\000" +
    "\010\012\021\025\073\026\044\001\001\000\010\012\021" +
    "\025\072\026\044\001\001\000\002\001\001\000\010\012" +
    "\021\025\071\026\044\001\001\000\010\012\021\025\070" +
    "\026\044\001\001\000\010\012\021\025\067\026\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\012\021\024\105\025\031\026\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\012\021\025\122\026" +
    "\044\001\001\000\006\007\120\023\121\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\124\001\001\000\002\001\001\000\012" +
    "\012\021\024\126\025\031\026\044\001\001\000\002\001" +
    "\001\000\010\012\021\025\130\026\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\134\001\001\000" +
    "\004\004\137\001\001\000\002\001\001\000\004\021\136" +
    "\001\001\000\002\001\001\000\024\005\140\006\034\007" +
    "\006\012\021\022\017\023\040\024\037\025\031\026\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\012\021\025\150\026\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\153" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\121\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\014\166\015\170\016\163\017\164\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\174\001" +
    "\001\000\002\001\001\000\012\014\172\015\170\016\163" +
    "\017\164\001\001\000\002\001\001\000\004\011\177\001" +
    "\001\000\004\021\175\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\205" +
    "\001\001\000\004\021\206\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\016\211\017\164\001\001\000\002" +
    "\001\001\000\004\011\213\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\010\217\011\216\012\220\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\120\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= PROGRAM Decls BEGIN VarDecls Statements END 
            {
              ProgramOp RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DeclOp decl = (DeclOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int varDeclsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varDeclsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<VarDeclOp> varDecls = (ArrayList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Stat> statements = (ArrayList<Stat>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 BodyOp body = new BodyOp(varDecls, statements);
             RESULT = new ProgramOp(decl, body);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ProgramOp start_val = (ProgramOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Decls ::= VarDecl Decls 
            {
              DeclOp RESULT =null;
		int varDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarDeclOp varDecl = (VarDeclOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int declsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclOp decls = (DeclOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<VarDeclOp> varDeclOps = new ArrayList<>(decls.getVarDeclOps());
                                        varDeclOps.add(0,varDecl);
                                        RESULT = new DeclOp(varDeclOps, decls.getDefDeclOps());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Decls ::= DefDecl Decls 
            {
              DeclOp RESULT =null;
		int defDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int defDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefDeclOp defDecl = (DefDeclOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int declsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclOp decls = (DeclOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<DefDeclOp> defDeclOps = new ArrayList<>(decls.getDefDeclOps());
                                            defDeclOps.add(0,defDecl);
                                            RESULT = new DeclOp(decls.getVarDeclOps(), defDeclOps);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Decls ::= 
            {
              DeclOp RESULT =null;
		 RESULT = new DeclOp(new ArrayList<>(), new ArrayList<>());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // VarDecls ::= VarDecls VarDecl 
            {
              ArrayList<VarDeclOp> RESULT =null;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<VarDeclOp> varDeclList = (ArrayList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int varDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDeclOp varDecl = (VarDeclOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<VarDeclOp>();
                                                    RESULT.add(0,varDecl);
                                                    RESULT.addAll(0,varDeclList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecls",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VarDecls ::= 
            {
              ArrayList<VarDeclOp> RESULT =null;
		 RESULT = new ArrayList<VarDeclOp>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecls",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VarDecl ::= VarsOptInit COLON TypeOrConstant SEMI 
            {
              VarDeclOp RESULT =null;
		int varsOptInitListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varsOptInitListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<VarsOptInitOp> varsOptInitList = (ArrayList<VarsOptInitOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typeOrCostantleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeOrCostantright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TypeOrConstOp typeOrCostant = (TypeOrConstOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDeclOp(varsOptInitList, typeOrCostant); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VarsOptInit ::= ID PIPE VarsOptInit 
            {
              ArrayList<VarsOptInitOp> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varsOptInitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varsOptInitright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VarsOptInitOp> varsOptInit = (ArrayList<VarsOptInitOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<VarsOptInitOp>();
                                                    RESULT.add(0,new VarsOptInitOp("singleDecl",new ID(id)));
                                                    RESULT.addAll(varsOptInit);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarsOptInit",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VarsOptInit ::= ID ASSIGNDECL Expr PIPE VarsOptInit 
            {
              ArrayList<VarsOptInitOp> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varsOptInitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varsOptInitright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VarsOptInitOp> varsOptInit = (ArrayList<VarsOptInitOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<VarsOptInitOp>();
                                                                          RESULT.add(0,new VarsOptInitOp("declWithExpr",new ID(id),expr));
                                                                          RESULT.addAll(varsOptInit);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarsOptInit",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VarsOptInit ::= ID 
            {
              ArrayList<VarsOptInitOp> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<VarsOptInitOp>();
                        RESULT.add(0,new VarsOptInitOp("singleDecl",new ID(id)));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarsOptInit",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VarsOptInit ::= ID ASSIGNDECL Expr 
            {
              ArrayList<VarsOptInitOp> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<VarsOptInitOp>();
                                            RESULT.add(0,new VarsOptInitOp("declWithExpr",new ID(id),expr));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarsOptInit",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TypeOrConstant ::= Type 
            {
              TypeOrConstOp RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TypeOrConstOp(type); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeOrConstant",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TypeOrConstant ::= Constant 
            {
              TypeOrConstOp RESULT =null;
		int costantleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int costantright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Const costant = (Const)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TypeOrConstOp(costant); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeOrConstant",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Type ::= INT 
            {
              Type RESULT =null;
		 RESULT = new Type("INT", false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Type ::= BOOL 
            {
              Type RESULT =null;
		 RESULT = new Type("BOOL", false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Type ::= DOUBLE 
            {
              Type RESULT =null;
		 RESULT = new Type("DOUBLE", false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Type ::= STRING 
            {
              Type RESULT =null;
		 RESULT = new Type("STRING", false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Type ::= CHAR 
            {
              Type RESULT =null;
		 RESULT = new Type("CHAR", false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Constant ::= TRUE 
            {
              Const RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Const("TRUE", "true"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Constant ::= FALSE 
            {
              Const RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Const("FALSE", "false"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Constant ::= INT_CONST 
            {
              Const RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Const("INT_CONST", value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Constant ::= DOUBLE_CONST 
            {
              Const RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Const("DOUBLE_CONST",value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Constant ::= CHAR_CONST 
            {
              Const RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Const("CHAR_CONST", value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Constant ::= STRING_CONST 
            {
              Const RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Const("STRING_CONST", value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DefDecl ::= DEF ID LPAR ParDecls RPAR OptType Body 
            {
              DefDeclOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int parDeclsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int parDeclsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<ParDeclOp> parDecls = (ArrayList<ParDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int optTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int optTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type optType = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DefDeclOp(new ID(id), parDecls, optType, body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DefDecl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DefDecl ::= DEF ID LPAR RPAR OptType Body 
            {
              DefDeclOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int optTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int optTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type optType = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DefDeclOp(new ID(id), new ArrayList<ParDeclOp>(), optType, body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DefDecl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ParDecls ::= ParDecl SEMI ParDecls 
            {
              ArrayList<ParDeclOp> RESULT =null;
		int parDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int parDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParDeclOp parDecl = (ParDeclOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int parDeclsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parDeclsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ParDeclOp> parDecls = (ArrayList<ParDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<ParDeclOp>();
                                                    RESULT.add(0,parDecl);
                                                    RESULT.addAll(parDecls); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParDecls",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ParDecls ::= ParDecl 
            {
              ArrayList<ParDeclOp> RESULT =null;
		int parDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParDeclOp parDecl = (ParDeclOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<ParDeclOp>();
                              RESULT.add(0,parDecl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParDecls",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ParDecl ::= PVars COLON Type 
            {
              ParDeclOp RESULT =null;
		int pvarListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pvarListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<PVarOp> pvarList = (ArrayList<PVarOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParDeclOp(pvarList, type); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParDecl",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PVars ::= PVar COMMA PVars 
            {
              ArrayList<PVarOp> RESULT =null;
		int pvarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pvarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PVarOp pvar = (PVarOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pvarListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pvarListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<PVarOp> pvarList = (ArrayList<PVarOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<PVarOp>();
                             RESULT.add(0,pvar);
                             RESULT.addAll(pvarList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PVars",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PVars ::= PVar 
            {
              ArrayList<PVarOp> RESULT =null;
		int pvarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pvarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PVarOp pvar = (PVarOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<PVarOp>();
                  RESULT.add(0,pvar); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PVars",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PVar ::= ID 
            {
              PVarOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  new PVarOp(new ID(id),false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PVar",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PVar ::= REF ID 
            {
              PVarOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PVarOp(new ID(id),true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PVar",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OptType ::= COLON Type 
            {
              Type RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = type; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OptType",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OptType ::= 
            {
              Type RESULT =null;
		 RESULT = new Type("Void", true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OptType",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Body ::= LBRAC VarDecls Statements RBRAC 
            {
              BodyOp RESULT =null;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<VarDeclOp> varDeclList = (ArrayList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Stat> statList = (ArrayList<Stat>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new BodyOp(varDeclList, statList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Statements ::= Stat Statements 
            {
              ArrayList<Stat> RESULT =null;
		int statleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stat stat = (Stat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Stat> statList = (ArrayList<Stat>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Stat>();
                                                RESULT.add(0,stat);
                                                RESULT.addAll(statList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statements",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Statements ::= 
            {
              ArrayList<Stat> RESULT =null;
		 RESULT = new ArrayList<Stat>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statements",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Stat ::= Vars IN SEMI 
            {
              Stat RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<ID> vars = (ArrayList<ID>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new ReadOp(vars);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Stat ::= Exprs OUT SEMI 
            {
              Stat RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expr> exprList = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new WriteOp("Out",exprList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Stat ::= Exprs OUTNL SEMI 
            {
              Stat RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expr> exprList = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new WriteOp("OutNewLine",exprList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Stat ::= Vars ASSIGN Exprs SEMI 
            {
              Stat RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<ID> vars = (ArrayList<ID>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expr> exprList = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AssignOp(vars,exprList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Stat ::= FunCall SEMI 
            {
              Stat RESULT =null;
		int funCallleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funCallright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FunCallOp funCall = (FunCallOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 FunCallOp tmp = funCall;
                                RESULT = new FunCallOpStat(tmp.getId(),tmp.getParametri());
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Stat ::= IF LPAR Expr RPAR THEN Body ELSE Body 
            {
              Stat RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int body1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int body1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		BodyOp body1 = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int body2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int body2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BodyOp body2 = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfThenElseOp(expr,body1,body2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Stat ::= IF LPAR Expr RPAR THEN Body 
            {
              Stat RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int body1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int body1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BodyOp body1 = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfThenOp(expr,body1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Stat ::= WHILE LPAR Expr RPAR DO Body 
            {
              Stat RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WhileOp(expr,body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Stat ::= RETURN Expr SEMI 
            {
              Stat RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ReturnOp(expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Vars ::= ID PIPE Vars 
            {
              ArrayList<ID> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ID> vars = (ArrayList<ID>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<ID>();
                                RESULT.add(0,new ID(id));
                                RESULT.addAll(vars); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Vars",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Vars ::= ID 
            {
              ArrayList<ID> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<ID>();
                   RESULT.add(0,new ID(id)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Vars",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Exprs ::= Expr COMMA Exprs 
            {
              ArrayList<Expr> RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expr> exprList = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ArrayList<Expr>();
                                            RESULT.add(0,expr1);
                                            RESULT.addAll(exprList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exprs",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Exprs ::= Expr 
            {
              ArrayList<Expr> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Expr>();
                      RESULT.add(0,expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exprs",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FunCall ::= ID LPAR Exprs RPAR 
            {
              FunCallOp RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expr> exprList = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FunCallOp(new ID(value), exprList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunCall",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FunCall ::= ID LPAR RPAR 
            {
              FunCallOp RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new FunCallOp(new ID(value),new ArrayList<Expr>()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunCall",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expr ::= Expr PLUS Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArithOp("AddOp", expr1, expr2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expr ::= Expr MINUS Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArithOp("MinusOp", expr1, expr2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expr ::= Expr TIMES Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArithOp("TimesOp", expr1, expr2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expr ::= Expr DIV Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArithOp("DivOp", expr1, expr2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expr ::= Expr AND Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BoolOp("AndOp", expr1, expr2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expr ::= Expr OR Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BoolOp("OrOp", expr1, expr2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expr ::= Expr GT Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RelOp("GtOp", expr1, expr2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expr ::= Expr GE Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RelOp("GeOp", expr1, expr2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expr ::= Expr LT Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RelOp("LtOp", expr1, expr2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expr ::= Expr LE Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RelOp("LeOp", expr1, expr2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expr ::= Expr EQ Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RelOp("EqOp", expr1, expr2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expr ::= Expr NE Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RelOp("NeOp", expr1, expr2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expr ::= LPAR Expr RPAR 
            {
              Expr RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = expr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expr ::= MINUS Expr 
            {
              Expr RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryOp("MinusOp", expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expr ::= NOT Expr 
            {
              Expr RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryOp("NotOp", expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expr ::= ID 
            {
              Expr RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ID(value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expr ::= FunCall 
            {
              Expr RESULT =null;
		int funCallleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funCallright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunCallOp funCall = (FunCallOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 FunCallOp tmp = funCall;
                           RESULT = new FunCallOpExpr(tmp.getId(), tmp.getParametri());
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expr ::= Constant 
            {
              Expr RESULT =null;
		int constantleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int constantright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Const constant = (Const)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = constant; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
